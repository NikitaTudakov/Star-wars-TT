{"version":3,"sources":["components/StarShips/ShipsAdditional/ShipsAdditional.jsx","components/StarShips/StarShips.jsx","components/Planets/PlanetAdditional/PlanetAdditional.jsx","components/Planets/Planets.jsx","components/FilmDetails/FilmDetails.jsx","components/FilmCard/FilmCard.jsx","components/FilmList/FilmList.jsx","App.js","api.js","index.js"],"names":["ShipsAdditional","starship","Card","Content","Header","Description","model","manufacturer","cost_in_credits","StarShips","starships","useState","opened","setOpened","className","map","onClick","key","created","prevopened","includes","filter","el","name","PlanetAdditional","planet","climate","terrain","population","Planets","planets","FilmDetails","title","opening_crawl","release_date","producer","director","open","setOpen","filmstarShips","setStarships","filmPlanets","setPlanets","showModal","setModal","getStarShips","a","Promise","all","fetch","then","responce","json","obj","prev","getPlanets","useEffect","Modal","onClose","onOpen","size","trigger","Button","Actions","color","FilmCard","film","FilmList","films","Group","itemsPerRow","stackable","episode_id","App","setFilms","query","setQuery","response","results","result","filteredFilms","toLowerCase","Container","type","placeholder","value","onChange","event","target","basic","sort","film1","film2","localeCompare","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6c80d3e5.chunk.js","sourcesContent":["import React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\n\n\nexport const ShipsAdditional = ({starship}) => (\n  <Card>\n    <Card.Content>\n      <Card.Header>Additional info</Card.Header>\n      <Card.Description>\n        <p>Model: {starship.model}</p>\n        <p>Manufacturer: {starship.manufacturer}</p>\n        <p>Cost: {starship.cost_in_credits}</p>\n      </Card.Description>\n    </Card.Content>\n  </Card>\n);\n\nShipsAdditional.propTypes = {\n  starship: PropTypes.shape({\n    model: PropTypes.string.isRequired,\n    manufacturer: PropTypes.string.isRequired,\n    cost_in_credits: PropTypes.string.isRequired,\n  }).isRequired\n}","import React, { useState } from 'react';\nimport {ShipsAdditional } from './ShipsAdditional';\nimport PropTypes, { arrayOf, shape } from 'prop-types';\nimport './StarShips.scss';\n\nexport const StarShips = ({ starships }) => {\n  const [opened, setOpened] = useState([])\n\n    const handleToggle = (key) => {\n      setOpened(prevopened => \n        opened.includes(key) ? opened.filter(el => el !== key)\n        : [...prevopened, key]\n      );\n    };\n\n  return(\n    <ol className='starships__list list'>\n      {starships.map( starship => (\n          <li key={starship.created}\n              className='list__item'\n          >\n            <p onClick={() => handleToggle(starship.created)}>\n              Name: {starship.name}\n            </p>\n            \n            {opened.includes(starship.created) && (\n              <ShipsAdditional starship={starship}/>\n            )}\n          </li>\n      ))}\n    </ol>\n  )\n}\n\nStarShips.propTypes = {\n  starships: arrayOf(shape({\n    created: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired)\n}\n","import React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\n\n\nexport const PlanetAdditional = ({planet}) => {\n\n  return (\n    <Card>\n      <Card.Content>\n        <Card.Header>Details</Card.Header>\n        <Card.Description>\n          <p>Climate: {planet.climate}</p>\n          <p>Terrain: {planet.terrain}</p>\n          <p>Population: {planet.population}</p>\n        </Card.Description>\n      </Card.Content>\n    </Card>\n  )\n}\n\nPlanetAdditional.propTypes = {\n  planet: PropTypes.shape({\n    climate: PropTypes.string.isRequired,\n    terrain: PropTypes.string.isRequired,\n    population: PropTypes.string.isRequired,\n  }).isRequired\n}","import React, { useState } from 'react';\nimport { PlanetAdditional } from './PlanetAdditional';\nimport PropTypes, { arrayOf, shape } from 'prop-types';\n\nexport const Planets = ({ planets }) => {\n    const [opened, setOpened] = useState([]);\n\n    const handleToggle = (key) => {\n      setOpened(prevopened => (\n        opened.includes(key) ? opened.filter(el => el !== key)\n        : [...prevopened, key]\n      ));\n    };\n\n  return (\n    <ul className=\"planets__list list\">\n      {planets.map( planet => (\n        <li\n          className=\"list__item\"\n          key={planet.created}\n          onClick={() => handleToggle(planet.created)}\n        >\n          <p>Name: {planet.name}</p>\n\n          {opened.includes(planet.created) && (\n            <PlanetAdditional planet={planet} />\n          )}\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nPlanets.propTypes = {\n  planets: arrayOf(shape({\n    created: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n  }).isRequired)\n}","import React, { useEffect, useState } from 'react';\nimport { Button, Header, Modal} from 'semantic-ui-react';\nimport { StarShips } from '../StarShips';\nimport {Planets } from '../Planets';\nimport PropTypes, { arrayOf, string } from 'prop-types';\n\nexport const FilmDetails = ({ title, planets, opening_crawl, release_date, producer, director, starships }) => {\n\n  const [open, setOpen] = useState(false);\n  const [filmstarShips, setStarships] = useState([]);\n  const [filmPlanets, setPlanets] = useState([]);\n  const [showModal, setModal] = useState(false)\n\n  const getStarShips = async () => {\n    Promise.all(starships.map(starship => (\n      fetch(starship)\n      .then(responce => responce.json())\n      .then(obj => setStarships(prev => [...prev, obj]))\n    )))\n  }\n\n  const getPlanets = async () => {\n    Promise.all(planets.map(planet => (\n      fetch(planet)\n      .then(responce => responce.json())\n      .then(obj => setPlanets(prev => [...prev, obj])))\n    ))\n  }\n\n  useEffect(() => {\n    return () => {\n      getStarShips();\n      getPlanets();\n    }\n// eslint-disable-next-line\n  }, [showModal])\n\n  return (\n    <Modal\n        onClose={() => setOpen(false)}\n        onOpen={() => {\n          setOpen(true);\n          setModal(true)\n        }}\n        open={open}\n        size=\"tiny\"\n        trigger={<Button>Show details</Button>}\n      >\n      <Modal.Header>{title}</Modal.Header>\n      <Modal.Content>\n        <Modal.Description>\n          <p>Producer: {producer}</p>\n          <p>Directrors: {director}</p>\n          <p>Release date: {release_date}</p>\n          <Header>Description</Header>\n          <p>{opening_crawl}</p>\n        </Modal.Description>\n        <br></br>\n        <span>Starships:</span>\n        <StarShips  starships={filmstarShips}/>\n        <p>Planets:</p>\n        <Planets planets={filmPlanets} />\n      </Modal.Content>\n      <Modal.Actions>\n        <Button color='black' onClick={() => setOpen(false)}>\n          Close\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  )\n}\n\n\nFilmDetails.propTypes = {\n  title: PropTypes.string.isRequired,\n  opening_crawl: PropTypes.string.isRequired,\n  release_date: PropTypes.string.isRequired,\n  producer: PropTypes.string.isRequired,\n  director: PropTypes.string.isRequired,\n  planets: arrayOf(string).isRequired,\n  starships: arrayOf(string).isRequired,\n}","import React from 'react';\nimport { Card } from 'semantic-ui-react';\nimport { FilmDetails } from '../FilmDetails';\nimport PropTypes from 'prop-types';\n\n\nexport const FilmCard = ({ film }) => {\n\n  return (\n    <>\n      <Card.Content>\n        <Card.Header>{film.title}</Card.Header>\n        <Card.Description>\n          <br></br>\n          <p>{film.opening_crawl}</p>\n        </Card.Description>\n      </Card.Content>\n\n      <FilmDetails\n        {...film}\n      />\n    </>\n  )\n}\n\nFilmCard.propTypes = {\n  film: PropTypes.shape({\n    title: PropTypes.string.isRequired,\n    opening_crawl: PropTypes.string.isRequired,\n  })\n}","import React from 'react';\nimport { FilmCard } from '../FilmCard';\nimport { Card } from 'semantic-ui-react';\nimport PropTypes from 'prop-types';\n\n\n\nexport const FilmList = ({ films }) => (\n  <Card.Group \n      itemsPerRow={3}\n      stackable\n      \n    >\n      {films.map(film => (\n        <Card key={film.episode_id}><FilmCard film={film} /></Card>\n        ))}\n  </Card.Group>\n)\n\nFilmList.propTypes = {\n  films: PropTypes.arrayOf(PropTypes.shape({\n    episode_id: PropTypes.number.isRequired,\n  }))\n}","import React, { useState, useEffect } from 'react';\nimport { FilmList } from './components/FilmList';\nimport { getAllFilms } from './api';\nimport { Button, Container } from 'semantic-ui-react'\nimport 'semantic-ui-css/semantic.min.css';\nimport './App.css';\n\nfunction App() {\n  const [films, setFilms] = useState([]);\n  const [query, setQuery] = useState('');\n\n  useEffect(() => {\n    getAllFilms()\n    .then(result => setFilms(result));\n  }, []);\n\n  const sortByName = () => {\n    setFilms([...films].sort((film1, film2) => (\n      film1.title.localeCompare(film2.title)\n    )))\n  };\n\n  const getfilteredFilms = () => (\n    films.filter(film => (\n      film.title.toLowerCase().includes(query.toLowerCase())))\n  )\n\n  const filteredFilms = getfilteredFilms();\n\n  return(\n    <Container >\n      <div className=\"ui input\">\n        <input\n          type=\"text\"\n          placeholder=\"find a movie...\"\n          value={query}\n          onChange={event => setQuery(event.target.value)}/>\n      </div>\n      <Button\n        basic color='grey'\n        onClick={sortByName}>\n        Sort by Title\n      </Button>\n      <FilmList films={filteredFilms}/>\n    </Container>\n  )\n}\n\nexport default App;\n","const API_URL = 'https://swapi.dev/api';\n\nexport function getAllFilms() {\n  return fetch(`${API_URL}/films/`)\n    .then(response => response.json())\n    .then(obj => obj.results)\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}